/**
 * 
 */
package org.msh.etbm.services;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceException;

import org.hibernate.exception.SQLGrammarException;
import org.hsqldb.HsqlException;
import org.msh.etbm.desktop.app.App;
import org.msh.etbm.entities.*;
import org.msh.etbm.services.login.ServerSignatureServices;
import org.msh.etbm.services.login.UserSession;
import org.msh.springframework.persistence.ActionCallback;
import org.msh.springframework.persistence.EntityManagerUtils;
import org.msh.utils.date.DateUtils;
import org.springframework.stereotype.Component;

/**
 * @author Mauricio Santos
 * Not being used, because the auto tags on server are written in MySQL and local database uses another SQL pattern.
 * While a better solution is not found the link between tags and cases will allways be updated when synchronizing.
 */
@Component
public class TagServices {

	private boolean updated;

	/**
	 * Update the automatic tags of a case
	 * @param tbcase

	public void updateTags(TbCase tbcase) {
		EntityManager entityManager = App.getEntityManager();

		// avoid updating several times the case in the same request
		if (updated)
			return;

		// get tags
		List<Tag> tags = entityManager.createQuery("from Tag t where t.active = true " +
				"and t.sqlCondition is not null and t.workspace.id = #{defaultWorkspace.id}")
				.getResultList();

		if (tags.size() == 0)
			return;

		// erase all tags of the current case
		entityManager.createNativeQuery("delete from tags_case where case_id = :id " +
				"and tag_id in (select id from tag where sqlCondition is not null)")
				.setParameter("id", tbcase.getId())
				.executeUpdate();

		Integer wsid = UserSession.getWorkspace().getId();
		// update tags
		String sql = "";
		for (Tag tag: tags) {
			if (!sql.isEmpty())
				sql += " union ";
			sql += "select a.id, " + tag.getId() +
					" from tbcase a join patient p on p.id=a.patient_id " +
					" and p.workspace_id = " + wsid +
					" and a.id = " + tbcase.getId() +
					" and " + tag.getSqlCondition();
		}
		sql = "insert into tags_case (case_id, tag_id) " + sql;
		entityManager.createNativeQuery(sql).executeUpdate();
		entityManager.flush();

		updated = true;
	}*/

	/**
	 * Update the cases of an auto generated tag
	 * @param tag

	public boolean updateCases(Tag tag) {
		EntityManager entityManager = App.getEntityManager();

		if (!tag.isAutogenerated())
			return false;

		// remove previous tags
		String sql = "delete from tags_case where tag_id = :id";
		entityManager.createNativeQuery(sql).setParameter("id", tag.getId()).executeUpdate();

		Integer wsid = UserSession.getWorkspace().getId();

		// is tag active ?
		if (tag.isActive()) {
			// include new tags
			sql = "insert into tags_case (case_id, tag_id) " +
					"select a.id, " + tag.getId() + " from tbcase a join patient p on p.id=a.patient_id " +
					"where " + tag.getSqlCondition() + " and p.workspace_id = :id";
			entityManager.createNativeQuery(sql).setParameter("id", wsid).executeUpdate();
		}

		return true;
	}*/

	/**
	 * Update the cases of an auto generated tag
	 */
	public static void updateAllAutomaticTags() {
		EntityManagerUtils.doInTransaction(new ActionCallback() {
			@Override
			public void execute(Object data) {
				EntityManager entityManager = App.getEntityManager();

				List<Tag> tags = entityManager.createQuery("from Tag").getResultList();

				for(Tag tag : tags){
					if(tag.isAutogenerated()){
						// remove previous tags
						String sql = "delete from tags_case where tag_id = :id";
						entityManager.createNativeQuery(sql).setParameter("id", tag.getId()).executeUpdate();

						Integer wsid = tag.getWorkspace().getId();

						// include new tags
						sql = "insert into tags_case (case_id, tag_id) " +
								"select a.id, " + tag.getId() + " from tbcase a join patient p on p.id=a.patient_id " +
								"where " + tag.getSqlCondition() + " and p.workspace_id = :id";

						try{
							entityManager.createNativeQuery(sql).setParameter("id", wsid).executeUpdate();
						}catch(PersistenceException exception){
							//avoid error if any sql that came from server is incompatible with Desktop.
							System.out.println("Problem processing Tag: "+tag.getName());
						}
					}
				}

				entityManager.flush();
			}
		});
	}
}
